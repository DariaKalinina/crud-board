{"version":3,"sources":["service/index.js","service/data.js","AC/index.js","reducer/index.js","reducer/boardList.js","reducer/currentBoard.js","store/index.js","middlewares/randomId.js","component/HelperText/index.js","component/BoardField/index.js","component/Board/index.js","component/BoardItem/index.js","component/BoardList/index.js","component/App/index.js","index.js"],"names":["myStorage","MyStorage","data","_this","this","Object","classCallCheck","init","storage","createBoard","id","board","title","text","phone","city","some","elem","undefined","addBoard","store","newBoard","push","changeBoard","changeIndex","findIndex","splice","deleteBoard","deleteBoardIndex","deleteIndex","res","length","dbName","localStorage","JSON","parse","stringify","DELETE","SAVE","CHANGE","CHOOSE_ID","deleteItem","type","payload","saveItem","arguments","generateId","changeItem","chooseItem","combineReducers","boardList","state","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","next","hasOwnProperty","objectSpread","Date","now","toString","thunk","createStore","reducer","HelperText","switchType","switchContent","textArray","react","map","index","key","_this$props","props","className","React","BoardField","fieldStyle","validStatus","join","handlerChange","e","field","handler","value","target","numbers","replace","match","exec","shift","handlerChangeForCity","document","querySelector","classList","remove","openList","add","chooseContent","onChange","maxLength","style","resize","placeholder","onClick","item","textHelper","validStatusString","src_component_HelperText","Board","possibleConstructorReturn","getPrototypeOf","call","setState","defineProperty","validField","validTitle","validNumber","isValid","handlerSubmit","src_component_BoardField","nextProps","prevState","currentBoard","find","connect","dispatch","bindActionCreators","BoardItem","handleChange","handleDelete","_this2","_this$props$board","BoardList","sort","boardA","boardB","src_component_BoardItem","App","src_component_Board","src_component_BoardList","ReactDOM","render","react_default","a","createElement","es","src_component_App","getElementById"],"mappings":"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","file":"static/js/main.22d263cb.chunk.js","sourcesContent":["import data from './data';\n\nclass MyStorage {\n    constructor(data) {\n        this.dbName = 'boardList';\n\n        //если нет выжеленной ячейки памяти с данными, то иницируем ячейку\n        if (this.storage === null) {\n            this.init(data);\n        }\n    };\n\n    // инициируются данные для отправки в сеттер, где будут записаны\n    init = (data) => {\n       this.storage = data;\n    };\n\n    // геттер получает данные из ячейку памяти\n    get storage() {\n        const { dbName } = this;\n        if (localStorage[dbName] !== undefined) {\n            return JSON.parse(localStorage[dbName]);\n        }\n        return null;\n    };\n\n    // сеттер в ячейку памяти записывает данные\n    set storage(storage) {\n        const { dbName } = this;\n        return localStorage[dbName] = JSON.stringify(storage);\n    };\n\n    createBoard = (id, board) => {\n        const { title, text, phone, city} = board;\n\n        if ([title, text, phone, city].some(elem => elem === undefined)) {\n            return false;\n        }\n\n        return {\n            id,\n            title,\n            text,\n            phone,\n            city,\n        };\n    };\n\n    addBoard = (board, id) => {\n        const store = this.storage;\n        const newBoard = this.createBoard(id, board);\n\n        if (newBoard !== false) {\n            store.push(newBoard);\n            this.storage = store;\n        }\n\n        return newBoard;\n    };\n\n    changeBoard = (board, id) => {\n        const store = this.storage;\n        const newBoard = this.createBoard(id, board);\n        const changeIndex = store.findIndex((board) => {\n            return board.id === id;\n        });\n        if (newBoard !== false) {\n            store.splice(changeIndex, 1, newBoard);\n            this.storage = store;\n        }\n\n        return newBoard;\n    };\n\n    deleteBoard = (deleteBoardIndex) => {\n        const store = this.storage;\n        const deleteIndex = store.findIndex((board) => {\n            return board.id === deleteBoardIndex;\n        });\n        let res = store.splice(deleteIndex, 1);\n        this.storage = store;\n\n        return !!res.length;\n    };\n}\n\nconst myStorage = new MyStorage(data);\n\nexport default myStorage;\n","export default [\n    {\n        'id': '12345',\n        'title': 'Продам слона',\n        'text': ' Купи слона, ну купи!',\n        'phone': '+7 (123) 345-45-56',\n        'city': 'Москва',\n    },{\n        'id': '67890',\n        'title': 'Куплю слона',\n        'text': ' Хочу слона, очень хочу!',\n        'phone': '+7 (111) 222-33-44',\n        'city': 'Москва',\n    },\n];","export const DELETE = 'DELETE';\nexport const SAVE = 'SAVE';\nexport const CHANGE = 'CHANGE';\nexport const CHOOSE_ID = 'CHOOSE_ID';\n\nexport function deleteItem(id) {\n    return {\n        type: DELETE,\n        payload: id\n    }\n}\n\nexport function saveItem(id = null, data) {\n    return {\n        type: SAVE,\n        payload: data,\n        generateId: id\n    }\n}\n\nexport function changeItem(id, data) {\n    return {\n        type: CHANGE,\n        payload: data,\n        id: id\n    }\n}\n\nexport function chooseItem(id) {\n    return {\n        type: CHOOSE_ID,\n        payload: id,\n    }\n}\n\n","import {combineReducers} from 'redux';\nimport boardList from './boardList';\nimport currentBoard from './currentBoard';\n\nexport default combineReducers({\n    boardList,\n    id: currentBoard,\n})","import myStorage from '../service';\nimport { SAVE, CHANGE, DELETE } from './../AC';\n\nexport default function boardList(state = myStorage.storage, action) {\n    const { type, payload, generateId, id } = action;\n\n    switch (type) {\n        case SAVE:\n            myStorage.addBoard(payload, generateId);\n            return myStorage.storage;\n\n        case CHANGE:\n            myStorage.changeBoard(payload, id);\n            return myStorage.storage;\n\n        case DELETE:\n            myStorage.deleteBoard(payload);\n            return myStorage.storage;\n\n        default: {\n            return state;\n        }\n    }\n}\n","import { CHOOSE_ID, CHANGE } from './../AC';\n\nexport default function currentBoard(state = null, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case CHOOSE_ID:\n            const newState = payload;\n            return newState;\n        case CHANGE:\n            return null;\n        default: {\n            return state;\n        }\n    }\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport reducer from '../reducer';\nimport randomId from '../middlewares/randomId';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(randomId, thunk));\n\nconst store = createStore(reducer, enhancer);\n\n//dev only\nwindow.store = store;\n\nexport default store;","export default store => next => action => {\n    if (!action.hasOwnProperty('generateId')) {\n        return next(action);\n    } else {\n        return next({\n            ...action,\n            generateId: Date.now().toString()\n        })\n    }\n}","import * as React from 'react';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nclass HelperText extends React.Component {\n    switchType = (type) => {\n        switch(type) {\n            case 'error':\n                return 'helper helper--error';\n            case 'valid':\n                return 'helper helper--valid ';\n            default:\n                return 'helper helper--info';\n        }\n    };\n    switchContent = (type, textArray) => {\n        switch(type) {\n            case 'error':\n                return <p>Заполните поле</p>;\n            case 'valid':\n                return <p>Заполнено</p>;\n            default:\n                return textArray.map((text, index) => <p key={index}>{text}</p>);\n        }\n    };\n\n    render() {\n        const { textArray, type } = this.props;\n        return (\n            <div className={this.switchType(type)}>\n                {this.switchContent(type, textArray)}\n            </div>\n        );\n    }\n}\n\nexport default HelperText;\n\nHelperText.propTypes = {\n    textArray: PropTypes.array,\n    type: PropTypes.string.isRequired,\n};","import * as React from 'react';\nimport HelperText from '../HelperText';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nconst city = ['Москва', 'Хабаровск', 'Чебоксары'];\n\nclass BoardField extends React.Component {\n    fieldStyle = (type, validStatus) => {\n        const className = [];\n        if (type === 'input') {\n            className.push('field__input');\n        } else if(type === 'textarea') {\n            className.push('field__textarea');\n        }\n        if(validStatus === 'error') {\n            className.push('field--error');\n        }\n        return className.join(' ');\n    };\n\n    handlerChange = (e, field) => {\n        const { handler } = this.props;\n        let value = e.target.value;\n        if(field === 'phone') {\n            const numbers = e.target.value.replace(/\\D/g, '');\n            const regex = /^([^\\s]{1})([^\\s]{3})([^\\s]{3})([^\\s]{2})([^\\s]{2})$/g;\n            const match = regex.exec(numbers);\n            if (match) {\n                match.shift();\n                value = '+7 ('+ match[1] +') ' + match[2] + '-' + match[3] + '-' + match[4];\n            }\n            const numberValue = match ? value : numbers;\n            handler(field, numberValue);\n            return;\n        }\n        handler(field, value);\n    };\n\n    handlerChangeForCity = (value, field) => {\n        const { handler } = this.props;\n        const cityList = document.querySelector('.select__option');\n        cityList.classList.remove('select__option--open');\n        handler(field, value);\n    };\n\n    openList = () => {\n        const cityList = document.querySelector('.select__option');\n        cityList.classList.add('select__option--open');\n    };\n\n    chooseContent = (type, text, validStatus) => {\n        switch (type) {\n            case 'input':\n                return (\n                    <input\n                        value={text}\n                        onChange={(e) => this.handlerChange(e, 'title')}\n                        className={this.fieldStyle('input', validStatus)}\n                        maxLength={140}\n                    />\n                );\n            case 'textarea':\n                return (\n                    <textarea\n                        value={text}\n                        onChange={(e) => this.handlerChange(e, 'text')}\n                        className={this.fieldStyle('textarea')}\n                        maxLength={300}\n                        style={{resize: 'none'}}\n                    />\n                );\n            case 'phone':\n                return (\n                    <input\n                        value={text}\n                        maxLength={18}\n                        placeholder='+7 (___) ___ - __ - __'\n                        onChange={(e) => this.handlerChange(e, 'phone')}\n                        className={this.fieldStyle('input', validStatus)}\n                    />\n                );\n            case 'city':\n                return (\n                    <div className='select'>\n                        <div className='select__field'>\n                            {text}\n                        </div>\n                        {text &&\n                        <button\n                            className='select__remove'\n                            onClick={() => this.handlerChangeForCity('', 'city')}\n                        />\n                        }\n                        <button className='select__open' onClick={this.openList} />\n                        <ul className='select__option'>\n                            {\n                                city.map((item) =>\n                                    <li\n                                        className='select__item'\n                                        key={item}\n                                        onClick={() => this.handlerChangeForCity(item, 'city')}\n                                    >\n                                        {item}\n                                    </li>\n                                )\n                            }\n                        </ul>\n                    </div>\n                );\n            default: break;\n        }\n    };\n\n    render() {\n        const { title, text, type, textHelper, validStatus} = this.props;\n        const validStatusString = (validStatus === false)\n            ? 'error'\n            : (validStatus === true)\n                ? 'valid'\n                : 'info';\n        return (\n            <div className='field'>\n                <span className='field__title'>{ title }</span>\n                <div className='field__content'>\n                    { this.chooseContent(type, text, validStatusString) }\n                    { textHelper &&\n                        <HelperText\n                            textArray={textHelper}\n                            type={validStatusString}\n                        />\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BoardField;\n\nBoardField.propTypes = {\n    type: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    text: PropTypes.string,\n    validStatus: PropTypes.bool,\n    textHelper: PropTypes.arrayOf(PropTypes.string),\n    handler: PropTypes.func,\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport BoardField from '../BoardField';\nimport { saveItem, changeItem } from '../../AC';\nimport './index.scss';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {\n                id: null,\n                title: '',\n                text: '',\n                phone: '',\n                city: '',\n            },\n            isValid: {\n                validTitle: null,\n                validNumber: null,\n            }\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.id && prevState.data.id !== nextProps.id) {\n            const currentBoard = nextProps.id && nextProps.board.find((board) => board.id === nextProps.id);\n            return {\n                data: {\n                    id: currentBoard ? currentBoard.id : null,\n                    title: currentBoard ? currentBoard.title : '',\n                    text: currentBoard ? currentBoard.text : '',\n                    phone: currentBoard ? currentBoard.phone : '',\n                    city: currentBoard ? currentBoard.city : '',\n                }\n            };\n        } else return null;\n    }\n\n    handlerChange = (field, value) => {\n        this.setState({\n            data: {\n                ...this.state.data,\n                [field]: value,\n            }\n        });\n    };\n\n    validField = () => {\n        const validTitle = this.state.data.title.length > 0;\n        const validNumber =  this.state.data.phone.replace(/\\D/g, '').length === 11;\n        this.setState({\n            isValid: {\n                validTitle: validTitle,\n                validNumber: validNumber,\n            }\n        });\n        return {validTitle, validNumber};\n    };\n\n    handlerSubmit = () => {\n        const isValid = this.validField();\n        if (isValid.validNumber && isValid.validTitle) {\n            if (this.state.data.id) {\n                this.props.changeItem(this.state.data.id, this.state.data);\n            } else {\n                this.props.saveItem(this.state.data.id, this.state.data);\n            }\n            this.setState({\n                data: {\n                    id: null,\n                    title: '',\n                    text: '',\n                    phone: '',\n                    city: '',\n                },\n                isValid: {\n                    validTitle: null,\n                    validNumber: null,\n                }\n            })\n        } else {\n            return null;\n        }\n    };\n\n    render() {\n        return (\n            <div className='board-main'>\n                <h1 className='board-main__title'>Подать объявление</h1>\n                <BoardField\n                    title={'Заголовок'}\n                    text={this.state.data.title}\n                    handler={this.handlerChange}\n                    validStatus={this.state.isValid.validTitle}\n                    type={'input'}\n                    textHelper={['Обязательное поле', 'Не более 140 символов']}\n                />\n                <BoardField\n                    title={'Текст объявления'}\n                    text={this.state.data.text}\n                    handler={this.handlerChange}\n                    type={'textarea'}\n                    textHelper={['Необязательное поле', 'Не более 300 символов']}\n                />\n                <BoardField\n                    title={'Телефон'}\n                    text={this.state.data.phone}\n                    handler={this.handlerChange}\n                    validStatus={this.state.isValid.validNumber}\n                    type={'phone'}\n                    textHelper={['Обязательное поле']}\n                />\n                <BoardField\n                    title={'Город'}\n                    text={this.state.data.city}\n                    handler={this.handlerChange}\n                    type={'city'}\n                    textHelper={['Необязательное поле']}\n                />\n                <button className={'submit-button'} onClick={this.handlerSubmit}>Подать</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.boardList,\n    id: state.id\n});\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n    {\n        saveItem,\n        changeItem\n    },\n    dispatch,\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n\nBoard.propTypes = {\n    board: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        phone: PropTypes.string.isRequired,\n        city: PropTypes.string,\n    })),\n    id: PropTypes.string,\n    saveItem: PropTypes.func,\n    changeItem: PropTypes.func,\n};","import * as React from 'react';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nclass BoardItem extends React.Component {\n    handleChange = (id) => {\n        this.props.chooseItem(id);\n    };\n\n    handleDelete = (id) => {\n        this.props.deleteItem(id);\n    };\n\n    render() {\n        const { title, text, phone, city, id} = this.props.board;\n        return (\n            <li className='board-item'>\n                <div className='board boar--left'>\n                    <div className='board__title'>{title}</div>\n                    {text && <div className='board__text'>{text}</div>}\n                    <div className='board__photo'></div>\n                </div>\n                <div className='board board--right'>\n                    <div className='board board--vertical'>\n                        <div className='board__phone'>{phone}</div>\n                        {city && <div className='board__city'>{city}</div>}\n                    </div>\n                    <div className='board board--vertical'>\n                        <button onClick={() => this.handleChange(id)} className='button button--blue'>Редактировать</button>\n                        <button onClick={() => this.handleDelete(id)} className='button button--red'>Удалить</button>\n                    </div>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default BoardItem;\n\n\nBoardItem.propTypes = {\n    board: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        phone: PropTypes.string.isRequired,\n        city: PropTypes.string,\n    }),\n    deleteItem: PropTypes.func,\n    chooseItem: PropTypes.func,\n};","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { deleteItem, chooseItem } from '../../AC';\nimport './index.scss';\nimport BoardItem from '../BoardItem';\nimport PropTypes from 'prop-types';\n\nclass BoardList extends React.Component {\n    render() {\n        return (\n            <div className='board-list'>\n                <h2 className='board-list__title'>Объявление</h2>\n                <ul>\n                    {\n                        this.props.boardList\n                            .sort((boardA, boardB) =>\n                                boardB.id - boardA.id\n                            )\n                            .map(board =>\n                            <BoardItem\n                                key={board.id}\n                                board={board}\n                                chooseItem={this.props.chooseItem}\n                                deleteItem={this.props.deleteItem}\n                            />\n                        )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    boardList: state.boardList,\n});\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n    {\n        deleteItem,\n        chooseItem\n    },\n    dispatch,\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardList);\n\nBoardList.propTypes = {\n    board: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        phone: PropTypes.string.isRequired,\n        city: PropTypes.string,\n    })),\n    deleteItem: PropTypes.func,\n    chooseItem: PropTypes.func,\n};","import * as React from 'react';\nimport Board from '../Board';\nimport BoardList from '../BoardList';\nimport './index.scss';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className='app'>\n                <div className='container'>\n                    <Board />\n                    <BoardList />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './component/App';\nimport './index.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}