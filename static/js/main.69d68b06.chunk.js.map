{"version":3,"sources":["service/index.js","service/data.js","AC/index.js","reducer/index.js","reducer/boardList.js","reducer/currentBoard.js","store/index.js","middlewares/randomId.js","component/HelperText/index.js","component/common/constant.js","component/BoardField/index.js","component/Board/index.js","component/BoardItem/index.js","component/BoardList/index.js","component/App/index.js","index.js"],"names":["myStorage","MyStorage","data","_this","this","Object","classCallCheck","init","storage","createBoard","id","board","title","text","phone","city","some","elem","undefined","addBoard","store","newBoard","push","changeBoard","changeIndex","findIndex","splice","deleteBoard","deleteBoardIndex","deleteIndex","res","length","dbName","localStorage","JSON","parse","stringify","DELETE","SAVE","CHANGE","CHOOSE_ID","deleteItem","type","payload","saveItem","arguments","generateId","changeItem","chooseItem","combineReducers","boardList","state","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","next","hasOwnProperty","objectSpread","Date","now","toString","thunk","createStore","reducer","HelperText","switchType","switchContent","textArray","react","map","key","_this$props","props","className","React","fieldType","phoneInput","input","textarea","select","BoardField","fieldStyle","validStatus","join","handlerChange","e","field","handler","value","target","numbers","replace","match","exec","shift","handlerChangeForSelect","document","querySelector","classList","remove","openSelectList","add","renderFieldByContext","onChange","maxLength","style","resize","placeholder","onClick","item","textHelper","validStatusString","src_component_HelperText","Board","isValid","validTitle","validNumber","setState","defineProperty","validateField","handlerSubmit","src_component_BoardField","nextProps","prevState","currentBoard","find","connect","dispatch","bindActionCreators","BoardItem","handleChange","handleDelete","_this2","_this$props$board","BoardList","sort","boardA","boardB","src_component_BoardItem","App","src_component_Board","src_component_BoardList","ReactDOM","render","react_default","a","createElement","es","src_component_App","getElementById"],"mappings":"wVAwFeA,EAFG,eAnFd,SAAAC,EAAYC,GAAM,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAH,GAAAG,KAUlBG,KAAO,SAACL,GACLC,EAAKK,QAAUN,GAXAE,KA6BlBK,YAAc,SAACC,EAAIC,GAAU,IACjBC,EAA4BD,EAA5BC,MAAOC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,KAE5B,OAAI,CAACH,EAAOC,EAAMC,EAAOC,GAAMC,KAAK,SAAAC,GAAI,YAAaC,IAATD,KAIrC,CACHP,KACAE,QACAC,OACAC,QACAC,SAzCUX,KA6ClBe,SAAW,SAACR,EAAOD,GACf,IAAMU,EAAQjB,EAAKK,QACba,EAAWlB,EAAKM,YAAYC,EAAIC,GAOtC,OALiB,IAAbU,IACAD,EAAME,KAAKD,GACXlB,EAAKK,QAAUY,GAGZC,GAtDOjB,KAyDlBmB,YAAc,SAACZ,EAAOD,GAClB,IAAMU,EAAQjB,EAAKK,QACba,EAAWlB,EAAKM,YAAYC,EAAIC,GAChCa,EAAcJ,EAAMK,UAAU,SAACd,GACjC,OAAOA,EAAMD,KAAOA,IAOxB,OALiB,IAAbW,IACAD,EAAMM,OAAOF,EAAa,EAAGH,GAC7BlB,EAAKK,QAAUY,GAGZC,GApEOjB,KAuElBuB,YAAc,SAACC,GACX,IAAMR,EAAQjB,EAAKK,QACbqB,EAAcT,EAAMK,UAAU,SAACd,GACjC,OAAOA,EAAMD,KAAOkB,IAEpBE,EAAMV,EAAMM,OAAOG,EAAa,GAGpC,OAFA1B,EAAKK,QAAUY,IAENU,EAAIC,QA9Eb3B,KAAK4B,OAAS,YAGO,OAAjB5B,KAAKI,SACLJ,KAAKG,KAAKL,uDAUJ,IACF8B,EAAW5B,KAAX4B,OACR,YAA6Bd,IAAzBe,aAAaD,GACNE,KAAKC,MAAMF,aAAaD,IAE5B,mBAICxB,GAAS,IACTwB,EAAW5B,KAAX4B,OACR,OAAOC,aAAaD,GAAUE,KAAKE,UAAU5B,YAyDnC,CCtFH,CACX,CACIE,GAAM,QACNE,MAAS,sEACTC,KAAQ,mGACRC,MAAS,qBACTC,KAAQ,wCACV,CACEL,GAAM,QACNE,MAAS,gEACTC,KAAQ,qHACRC,MAAS,qBACTC,KAAQ,0CCZHsB,EAAS,SACTC,EAAO,OACPC,EAAS,SACTC,EAAY,YAElB,SAASC,EAAW/B,GACvB,MAAO,CACHgC,KAAML,EACNM,QAASjC,GAIV,SAASkC,IAA0B,IAAjBlC,EAAiBmC,UAAAd,OAAA,QAAAb,IAAA2B,UAAA,GAAAA,UAAA,GAAZ,KAAM3C,EAAM2C,UAAAd,OAAA,EAAAc,UAAA,QAAA3B,EACtC,MAAO,CACHwB,KAAMJ,EACNK,QAASzC,EACT4C,WAAYpC,GAIb,SAASqC,EAAWrC,EAAIR,GAC3B,MAAO,CACHwC,KAAMH,EACNI,QAASzC,EACTQ,GAAIA,GAIL,SAASsC,EAAWtC,GACvB,MAAO,CACHgC,KAAMF,EACNG,QAASjC,GC3BFuC,kBAAgB,CAC3BC,UCFW,WAAsD,IAAnCC,EAAmCN,UAAAd,OAAA,QAAAb,IAAA2B,UAAA,GAAAA,UAAA,GAA3B7C,EAAUQ,QAAS4C,EAAQP,UAAAd,OAAA,EAAAc,UAAA,QAAA3B,EACzDwB,EAAkCU,EAAlCV,KAAMC,EAA4BS,EAA5BT,QAASG,EAAmBM,EAAnBN,WAAYpC,EAAO0C,EAAP1C,GAEnC,OAAQgC,GACJ,KAAKJ,EAED,OADAtC,EAAUmB,SAASwB,EAASG,GACrB9C,EAAUQ,QAErB,KAAK+B,EAED,OADAvC,EAAUuB,YAAYoB,EAASjC,GACxBV,EAAUQ,QAErB,KAAK6B,EAED,OADArC,EAAU2B,YAAYgB,GACf3C,EAAUQ,QAErB,QACI,OAAO2C,IDdfzC,GEJW,WAA4C,IAAtByC,EAAsBN,UAAAd,OAAA,QAAAb,IAAA2B,UAAA,GAAAA,UAAA,GAAd,KAAMO,EAAQP,UAAAd,OAAA,EAAAc,UAAA,QAAA3B,EAC/CwB,EAAkBU,EAAlBV,KAAMC,EAAYS,EAAZT,QAEd,OAAQD,GACJ,KAAKF,EAED,OADiBG,EAGrB,KAAKJ,EACD,OAAO,KAEX,QACI,OAAOY,sBCHbE,GALgB,kBAAXC,QACPA,OAAOC,qCACHD,OAAOC,qCAAqC,IACvCC,KAEqBC,YCXnB,SAAArC,GAAK,OAAI,SAAAsC,GAAI,OAAI,SAAAN,GAC5B,OAAKA,EAAOO,eAAe,cAGhBD,EAAKrD,OAAAuD,EAAA,EAAAvD,CAAA,GACL+C,EADI,CAEPN,WAAYe,KAAKC,MAAMC,cAJpBL,EAAKN,MDSwCY,MAEtD5C,EAAQ6C,YAAYC,EAASb,GAGnCC,OAAOlC,MAAQA,EAEAA,qCEqBA+C,oNAjCXC,WAAa,SAAC1B,GACV,OAAOA,GACH,IAAK,QACD,MAAO,uBACX,IAAK,QACD,MAAO,wBACX,QACI,MAAO,0BAInB2B,cAAgB,SAAC3B,EAAM4B,GACnB,OAAO5B,GACH,IAAK,QACD,OAAO6B,EAAA,0GACX,IAAK,QACD,OAAOA,EAAA,iFACX,QACI,OAAOD,EAAUE,IAAI,SAAA3D,GAAI,OAAI0D,EAAA,mBAAGE,IAAK5D,GAAQA,+EAIhD,IAAA6D,EACuBtE,KAAKuE,MAAzBL,EADHI,EACGJ,UAAW5B,EADdgC,EACchC,KAEnB,OACI6B,EAAA,qBAAKK,UAAWxE,KAAKgE,WAAW1B,IAC1BtC,KAAKiE,cAAc3B,EAAM4B,WA7BlBO,cCJZC,EAAY,CACrBC,WAAY,kBACZC,MAAO,aACPC,SAAU,gBACVC,OAAQ,eCENnE,SAAO,CAAC,uCAAU,yDAAa,2DAgJtBoE,6MA5IXC,WAAa,SAAC1C,EAAM2C,GAChB,IAAMT,EAAY,GAYlB,OAVIlC,IAASoC,EAAUE,OAAStC,IAASoC,EAAUC,WAC/CH,EAAUtD,KAAK,gBACRoB,IAASoC,EAAUG,UAC1BL,EAAUtD,KAAK,mBAGC,UAAhB+D,GACAT,EAAUtD,KAAK,gBAGZsD,EAAUU,KAAK,QAG1BC,cAAgB,SAACC,EAAGC,GAAU,IAClBC,EAAYvF,EAAKwE,MAAjBe,QACJC,EAAQH,EAAEI,OAAOD,MAErB,GAAc,UAAVF,EAAmB,CACnB,IAAMI,EAAUL,EAAEI,OAAOD,MAAMG,QAAQ,MAAO,IAExCC,EADQ,wDACMC,KAAKH,GASzB,OAPIE,IACAA,EAAME,QACNN,EAAQ,OAAQI,EAAM,GAAI,KAAOA,EAAM,GAAK,IAAMA,EAAM,GAAK,IAAMA,EAAM,SAI7EL,EAAQD,EADYM,EAAQJ,EAAQE,GAKxCH,EAAQD,EAAOE,MAGnBO,uBAAyB,SAACP,EAAOF,GAAU,IAC/BC,EAAYvF,EAAKwE,MAAjBe,QACSS,SAASC,cAAc,mBAE/BC,UAAUC,OAAO,wBAC1BZ,EAAQD,EAAOE,MAGnBY,eAAiB,WACIJ,SAASC,cAAc,mBAE/BC,UAAUG,IAAI,2BAG3BC,qBAAuB,SAAC/D,EAAM7B,EAAMwE,GAChC,OAAQ3C,GACJ,KAAKoC,EAAUE,MACX,OACIT,EAAA,uBACIoB,MAAO9E,EACP6F,SAAU,SAAClB,GAAD,OAAOrF,EAAKoF,cAAcC,EAAG,UACvCZ,UAAWzE,EAAKiF,WAAWN,EAAUE,MAAOK,GAC5CsB,UAAW,MAGvB,KAAK7B,EAAUG,SACX,OACIV,EAAA,0BACIoB,MAAO9E,EACP6F,SAAU,SAAClB,GAAD,OAAOrF,EAAKoF,cAAcC,EAAG,SACvCZ,UAAWzE,EAAKiF,WAAWN,EAAUG,UACrC0B,UAAW,IACXC,MAAO,CAACC,OAAQ,UAG5B,KAAK/B,EAAUC,WACX,OACIR,EAAA,uBACIoB,MAAO9E,EACP8F,UAAW,GACXG,YAAY,yBACZJ,SAAU,SAAClB,GAAD,OAAOrF,EAAKoF,cAAcC,EAAG,UACvCZ,UAAWzE,EAAKiF,WAAWN,EAAUC,WAAYM,KAG7D,KAAKP,EAAUI,OACX,OACIX,EAAA,qBAAKK,UAAU,UACXL,EAAA,qBAAKK,UAAU,iBACV/D,GAEHA,GACE0D,EAAA,wBACIK,UAAU,iBACVmC,QAAS,kBAAM5G,EAAK+F,uBAAuB,GAAI,WAGvD3B,EAAA,wBAAQK,UAAU,eAAemC,QAAS5G,EAAKoG,iBAC/ChC,EAAA,oBAAIK,UAAU,kBAEN7D,EAAKyD,IAAI,SAACwC,GAAD,OACLzC,EAAA,oBACIK,UAAU,eACVH,IAAKuC,EACLD,QAAS,kBAAM5G,EAAK+F,uBAAuBc,EAAM,UAEhDA,iFAW5B,IAAAtC,EACiDtE,KAAKuE,MAAnD/D,EADH8D,EACG9D,MAAOC,EADV6D,EACU7D,KAAM6B,EADhBgC,EACgBhC,KAAMuE,EADtBvC,EACsBuC,WAAY5B,EADlCX,EACkCW,YACjC6B,GAAqC,IAAhB7B,EACrB,SACiB,IAAhBA,EACG,QACA,OAEV,OACId,EAAA,qBAAKK,UAAU,SACXL,EAAA,sBAAMK,UAAU,gBAAiBhE,GACjC2D,EAAA,qBAAKK,UAAU,kBACTxE,KAAKqG,qBAAqB/D,EAAM7B,EAAMqG,GACtCD,GACE1C,EAAA,cAAC4C,EAAD,CACI7C,UAAW2C,EACXvE,KAAMwE,aArITrC,aCCnBuC,oNAEFjE,MAAQ,CACJjD,KAAM,CACFQ,GAAI,KACJE,MAAO,GACPC,KAAM,GACNC,MAAO,GACPC,KAAM,IAEVsG,QAAS,CACLC,WAAY,KACZC,YAAa,SAmBrBhC,cAAgB,SAACE,EAAOE,GACpBxF,EAAKqH,SAAS,CACVtH,KAAKG,OAAAuD,EAAA,EAAAvD,CAAA,GACEF,EAAKgD,MAAMjD,KADdG,OAAAoH,EAAA,EAAApH,CAAA,GAECoF,EAAQE,SAKrB+B,cAAgB,WACZ,IAAMJ,EAAanH,EAAKgD,MAAMjD,KAAKU,MAAMmB,OAAS,EAC5CwF,EAAmE,KAApDpH,EAAKgD,MAAMjD,KAAKY,MAAMgF,QAAQ,MAAO,IAAI/D,OAS9D,OAPA5B,EAAKqH,SAAS,CACVH,QAAS,CACLC,WAAYA,EACZC,YAAaA,KAId,CAACD,aAAYC,kBAGxBI,cAAgB,WACZ,IAAMN,EAAUlH,EAAKuH,gBAErB,IAAIL,EAAQE,cAAeF,EAAQC,WAsB/B,OAAO,KApBHnH,EAAKgD,MAAMjD,KAAKQ,GAChBP,EAAKwE,MAAM5B,WAAW5C,EAAKgD,MAAMjD,KAAKQ,GAAIP,EAAKgD,MAAMjD,MAErDC,EAAKwE,MAAM/B,SAASzC,EAAKgD,MAAMjD,KAAKQ,GAAIP,EAAKgD,MAAMjD,MAGvDC,EAAKqH,SAAS,CACVtH,KAAM,CACFQ,GAAI,KACJE,MAAO,GACPC,KAAM,GACNC,MAAO,GACPC,KAAM,IAEVsG,QAAS,CACLC,WAAY,KACZC,YAAa,iFASzB,OACIhD,EAAA,qBAAKK,UAAU,iBACXL,EAAA,oBAAIK,UAAU,wBAAd,qGACAL,EAAA,cAACqD,EAAD,CACIhH,MAAO,yDACPC,KAAMT,KAAK+C,MAAMjD,KAAKU,MACtB8E,QAAStF,KAAKmF,cACdF,YAAajF,KAAK+C,MAAMkE,QAAQC,WAChC5E,KAAMoC,EAAUE,MAChBiC,WAAY,CAAC,oGAAqB,sGAEtC1C,EAAA,cAACqD,EAAD,CACIhH,MAAO,8FACPC,KAAMT,KAAK+C,MAAMjD,KAAKW,KACtB6E,QAAStF,KAAKmF,cACd7C,KAAMoC,EAAUG,SAChBgC,WAAY,CAAC,gHAAuB,sGAExC1C,EAAA,cAACqD,EAAD,CACIhH,MAAO,6CACPC,KAAMT,KAAK+C,MAAMjD,KAAKY,MACtB4E,QAAStF,KAAKmF,cACdF,YAAajF,KAAK+C,MAAMkE,QAAQE,YAChC7E,KAAMoC,EAAUC,WAChBkC,WAAY,CAAC,uGAEjB1C,EAAA,cAACqD,EAAD,CACIhH,MAAO,iCACPC,KAAMT,KAAK+C,MAAMjD,KAAKa,KACtB2E,QAAStF,KAAKmF,cACd7C,KAAMoC,EAAUI,OAChB+B,WAAY,CAAC,mHAEjB1C,EAAA,wBAAQK,UAAW,gBAAiBmC,QAAS3G,KAAKuH,eAAlD,4FArGoBE,EAAWC,GACvC,GAAID,EAAUnH,IAAMoH,EAAU5H,KAAKQ,KAAOmH,EAAUnH,GAAI,CACpD,IAAMqH,EAAeF,EAAUnH,IAAMmH,EAAUlH,MAAMqH,KAAK,SAACrH,GAAD,OAAWA,EAAMD,KAAOmH,EAAUnH,KAC5F,MAAO,CACHR,KAAM,CACFQ,GAAIqH,EAAeA,EAAarH,GAAK,KACrCE,MAAOmH,EAAeA,EAAanH,MAAQ,GAC3CC,KAAMkH,EAAeA,EAAalH,KAAO,GACzCC,MAAOiH,EAAeA,EAAajH,MAAQ,GAC3CC,KAAMgH,EAAeA,EAAahH,KAAO,KAG9C,OAAO,YA5BF8D,cAwILoD,cAbS,SAAC9E,GAAD,MAAY,CAChCxC,MAAOwC,EAAMD,UACbxC,GAAIyC,EAAMzC,KAGa,SAACwH,GAAD,OAAcC,YACrC,CACIvF,WACAG,cAEJmF,IAGWD,CAA6Cb,GC9F7CgB,oNA9CXC,aAAe,SAAC3H,GACZP,EAAKwE,MAAM3B,WAAWtC,MAG1B4H,aAAe,SAAC5H,GACZP,EAAKwE,MAAMlC,WAAW/B,4EAGjB,IAAA6H,EAAAnI,KAAAoI,EACoCpI,KAAKuE,MAAMhE,MAA5CC,EADH4H,EACG5H,MAAOC,EADV2H,EACU3H,KAAMC,EADhB0H,EACgB1H,MAAOC,EADvByH,EACuBzH,KAAML,EAD7B8H,EAC6B9H,GAElC,OACI6D,EAAA,oBAAIK,UAAU,cAEVL,EAAA,qBAAKK,UAAU,oBACXL,EAAA,qBAAKK,UAAU,gBAAiBhE,GAC9BC,GAAQ0D,EAAA,qBAAKK,UAAU,eAAgB/D,GACzC0D,EAAA,qBAAKK,UAAU,kBAGnBL,EAAA,qBAAKK,UAAU,sBACXL,EAAA,qBAAKK,UAAU,yBACXL,EAAA,qBAAKK,UAAU,gBAAiB9D,GAC/BC,GAAQwD,EAAA,qBAAKK,UAAU,eAAgB7D,IAE5CwD,EAAA,qBAAKK,UAAU,yBACXL,EAAA,wBACIwC,QAAS,kBAAMwB,EAAKF,aAAa3H,IACjCkE,UAAU,uBAFd,kFAMAL,EAAA,wBACIwC,QAAS,kBAAMwB,EAAKD,aAAa5H,IACjCkE,UAAU,sBAFd,wDAjCAC,cCIlB4D,0LACO,IAAAtI,EAAAC,KACL,OACImE,EAAA,qBAAKK,UAAU,cACXL,EAAA,oBAAIK,UAAU,qBAAd,gEACAL,EAAA,wBAEQnE,KAAKuE,MAAMzB,UACNwF,KAAK,SAACC,EAAQC,GAAT,OACFA,EAAOlI,GAAKiI,EAAOjI,KAEtB8D,IAAI,SAAA7D,GAAK,OACV4D,EAAA,cAACsE,EAAD,CACIpE,IAAK9D,EAAMD,GACXC,MAAOA,EACPqC,WAAY7C,EAAKwE,MAAM3B,WACvBP,WAAYtC,EAAKwE,MAAMlC,wBAhB/BoC,cAsCToD,cAZS,SAAC9E,GAAD,MAAY,CAChCD,UAAWC,EAAMD,YAGM,SAACgF,GAAD,OAAcC,YACrC,CACI1F,aACAO,cAEJkF,IAGWD,CAA6CQ,GC5B7CK,0LAXP,OACIvE,EAAA,qBAAKK,UAAU,OACXL,EAAA,qBAAKK,UAAU,aACXL,EAAA,cAACwE,EAAD,MACAxE,EAAA,cAACyE,EAAD,eANFnE,oBCElBoE,IAASC,OACLC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUlI,MAAOA,GACb+H,EAAAC,EAAAC,cAACE,EAAD,OAEJpD,SAASqD,eAAe","file":"static/js/main.69d68b06.chunk.js","sourcesContent":["import data from './data';\n\nclass MyStorage {\n    constructor(data) {\n        this.dbName = 'boardList';\n\n        //если нет выжеленной ячейки памяти с данными, то иницируем ячейку\n        if (this.storage === null) {\n            this.init(data);\n        }\n    };\n\n    // инициируются данные для отправки в сеттер, где будут записаны\n    init = (data) => {\n       this.storage = data;\n    };\n\n    // геттер получает данные из ячейку памяти\n    get storage() {\n        const { dbName } = this;\n        if (localStorage[dbName] !== undefined) {\n            return JSON.parse(localStorage[dbName]);\n        }\n        return null;\n    };\n\n    // сеттер в ячейку памяти записывает данные\n    set storage(storage) {\n        const { dbName } = this;\n        return localStorage[dbName] = JSON.stringify(storage);\n    };\n\n    createBoard = (id, board) => {\n        const { title, text, phone, city} = board;\n\n        if ([title, text, phone, city].some(elem => elem === undefined)) {\n            return false;\n        }\n\n        return {\n            id,\n            title,\n            text,\n            phone,\n            city,\n        };\n    };\n\n    addBoard = (board, id) => {\n        const store = this.storage;\n        const newBoard = this.createBoard(id, board);\n\n        if (newBoard !== false) {\n            store.push(newBoard);\n            this.storage = store;\n        }\n\n        return newBoard;\n    };\n\n    changeBoard = (board, id) => {\n        const store = this.storage;\n        const newBoard = this.createBoard(id, board);\n        const changeIndex = store.findIndex((board) => {\n            return board.id === id;\n        });\n        if (newBoard !== false) {\n            store.splice(changeIndex, 1, newBoard);\n            this.storage = store;\n        }\n\n        return newBoard;\n    };\n\n    deleteBoard = (deleteBoardIndex) => {\n        const store = this.storage;\n        const deleteIndex = store.findIndex((board) => {\n            return board.id === deleteBoardIndex;\n        });\n        let res = store.splice(deleteIndex, 1);\n        this.storage = store;\n\n        return !!res.length;\n    };\n}\n\nconst myStorage = new MyStorage(data);\n\nexport default myStorage;\n","export default [\n    {\n        'id': '12345',\n        'title': 'Продам слона',\n        'text': ' Купи слона, ну купи!',\n        'phone': '+7 (123) 345-45-56',\n        'city': 'Москва',\n    },{\n        'id': '67890',\n        'title': 'Куплю слона',\n        'text': ' Хочу слона, очень хочу!',\n        'phone': '+7 (111) 222-33-44',\n        'city': 'Москва',\n    },\n];","export const DELETE = 'DELETE';\nexport const SAVE = 'SAVE';\nexport const CHANGE = 'CHANGE';\nexport const CHOOSE_ID = 'CHOOSE_ID';\n\nexport function deleteItem(id) {\n    return {\n        type: DELETE,\n        payload: id\n    }\n}\n\nexport function saveItem(id = null, data) {\n    return {\n        type: SAVE,\n        payload: data,\n        generateId: id\n    }\n}\n\nexport function changeItem(id, data) {\n    return {\n        type: CHANGE,\n        payload: data,\n        id: id\n    }\n}\n\nexport function chooseItem(id) {\n    return {\n        type: CHOOSE_ID,\n        payload: id,\n    }\n}\n\n","import {combineReducers} from 'redux';\nimport boardList from './boardList';\nimport currentBoard from './currentBoard';\n\nexport default combineReducers({\n    boardList,\n    id: currentBoard,\n})","import myStorage from '../service';\nimport { SAVE, CHANGE, DELETE } from './../AC';\n\nexport default function boardList(state = myStorage.storage, action) {\n    const { type, payload, generateId, id } = action;\n\n    switch (type) {\n        case SAVE:\n            myStorage.addBoard(payload, generateId);\n            return myStorage.storage;\n\n        case CHANGE:\n            myStorage.changeBoard(payload, id);\n            return myStorage.storage;\n\n        case DELETE:\n            myStorage.deleteBoard(payload);\n            return myStorage.storage;\n\n        default: {\n            return state;\n        }\n    }\n}\n","import { CHOOSE_ID, CHANGE } from './../AC';\n\nexport default function currentBoard(state = null, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case CHOOSE_ID:\n            const newState = payload;\n            return newState;\n\n        case CHANGE:\n            return null;\n\n        default: {\n            return state;\n        }\n    }\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport reducer from '../reducer';\nimport randomId from '../middlewares/randomId';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(randomId, thunk));\n\nconst store = createStore(reducer, enhancer);\n\n//dev only\nwindow.store = store;\n\nexport default store;","export default store => next => action => {\n    if (!action.hasOwnProperty('generateId')) {\n        return next(action);\n    } else {\n        return next({\n            ...action,\n            generateId: Date.now().toString()\n        })\n    }\n}","import * as React from 'react';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nclass HelperText extends React.Component {\n\n    switchType = (type) => {\n        switch(type) {\n            case 'error':\n                return 'helper helper--error';\n            case 'valid':\n                return 'helper helper--valid ';\n            default:\n                return 'helper helper--info';\n        }\n    };\n\n    switchContent = (type, textArray) => {\n        switch(type) {\n            case 'error':\n                return <p>Заполните поле</p>;\n            case 'valid':\n                return <p>Заполнено</p>;\n            default:\n                return textArray.map(text => <p key={text}>{ text }</p>);\n        }\n    };\n\n    render() {\n        const { textArray, type } = this.props;\n\n        return (\n            <div className={this.switchType(type)}>\n                { this.switchContent(type, textArray) }\n            </div>\n        );\n    }\n}\n\nexport default HelperText;\n\nHelperText.propTypes = {\n    textArray: PropTypes.array,\n    type: PropTypes.string.isRequired,\n};","export const fieldType = {\n    phoneInput: 'fieldPhoneInput',\n    input: 'fieldInput',\n    textarea: 'fieldTextArea',\n    select: 'fieldSelect',\n};","import * as React from 'react';\nimport HelperText from '../HelperText';\nimport PropTypes from 'prop-types';\nimport { fieldType } from '../common/constant.js';\nimport './index.scss';\n\nconst city = ['Москва', 'Хабаровск', 'Чебоксары'];\n\nclass BoardField extends React.Component {\n\n    fieldStyle = (type, validStatus) => {\n        const className = [];\n\n        if (type === fieldType.input || type === fieldType.phoneInput) {\n            className.push('field__input');\n        } else if (type === fieldType.textarea) {\n            className.push('field__textarea');\n        }\n\n        if (validStatus === 'error') {\n            className.push('field--error');\n        }\n\n        return className.join(' ');\n    };\n\n    handlerChange = (e, field) => {\n        const { handler } = this.props;\n        let value = e.target.value;\n\n        if (field === 'phone') {\n            const numbers = e.target.value.replace(/\\D/g, '');\n            const regex = /^([^\\s]{1})([^\\s]{3})([^\\s]{3})([^\\s]{2})([^\\s]{2})$/g;\n            const match = regex.exec(numbers);\n\n            if (match) {\n                match.shift();\n                value = '+7 ('+ match[1] +') ' + match[2] + '-' + match[3] + '-' + match[4];\n            }\n\n            const numberValue = match ? value : numbers;\n            handler(field, numberValue);\n            return;\n        }\n\n        handler(field, value);\n    };\n\n    handlerChangeForSelect = (value, field) => {\n        const { handler } = this.props;\n        const cityList = document.querySelector('.select__option');\n\n        cityList.classList.remove('select__option--open');\n        handler(field, value);\n    };\n\n    openSelectList = () => {\n        const cityList = document.querySelector('.select__option');\n\n        cityList.classList.add('select__option--open');\n    };\n\n    renderFieldByContext = (type, text, validStatus) => {\n        switch (type) {\n            case fieldType.input:\n                return (\n                    <input\n                        value={text}\n                        onChange={(e) => this.handlerChange(e, 'title')}\n                        className={this.fieldStyle(fieldType.input, validStatus)}\n                        maxLength={140}\n                    />\n                );\n            case fieldType.textarea:\n                return (\n                    <textarea\n                        value={text}\n                        onChange={(e) => this.handlerChange(e, 'text')}\n                        className={this.fieldStyle(fieldType.textarea)}\n                        maxLength={300}\n                        style={{resize: 'none'}}\n                    />\n                );\n            case fieldType.phoneInput:\n                return (\n                    <input\n                        value={text}\n                        maxLength={18}\n                        placeholder='+7 (___) ___ - __ - __'\n                        onChange={(e) => this.handlerChange(e, 'phone')}\n                        className={this.fieldStyle(fieldType.phoneInput, validStatus)}\n                    />\n                );\n            case fieldType.select:\n                return (\n                    <div className='select'>\n                        <div className='select__field'>\n                            {text}\n                        </div>\n                        { text &&\n                            <button\n                                className='select__remove'\n                                onClick={() => this.handlerChangeForSelect('', 'city')}\n                            />\n                        }\n                        <button className='select__open' onClick={this.openSelectList} />\n                        <ul className='select__option'>\n                            {\n                                city.map((item) =>\n                                    <li\n                                        className='select__item'\n                                        key={item}\n                                        onClick={() => this.handlerChangeForSelect(item, 'city')}\n                                    >\n                                        {item}\n                                    </li>\n                                )\n                            }\n                        </ul>\n                    </div>\n                );\n            default: break;\n        }\n    };\n\n    render() {\n        const { title, text, type, textHelper, validStatus} = this.props;\n        const validStatusString = (validStatus === false)\n            ? 'error'\n            : (validStatus === true)\n                ? 'valid'\n                : 'info';\n\n        return (\n            <div className='field'>\n                <span className='field__title'>{ title }</span>\n                <div className='field__content'>\n                    { this.renderFieldByContext(type, text, validStatusString) }\n                    { textHelper &&\n                        <HelperText\n                            textArray={textHelper}\n                            type={validStatusString}\n                        />\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BoardField;\n\nBoardField.propTypes = {\n    type: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    text: PropTypes.string,\n    validStatus: PropTypes.bool,\n    textHelper: PropTypes.arrayOf(PropTypes.string),\n    handler: PropTypes.func,\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport BoardField from '../BoardField';\nimport { saveItem, changeItem } from '../../AC';\nimport { fieldType } from '../common/constant.js';\nimport './index.scss';\n\nclass Board extends React.Component {\n\n    state = {\n        data: {\n            id: null,\n            title: '',\n            text: '',\n            phone: '',\n            city: '',\n        },\n        isValid: {\n            validTitle: null,\n            validNumber: null,\n        }\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.id && prevState.data.id !== nextProps.id) {\n            const currentBoard = nextProps.id && nextProps.board.find((board) => board.id === nextProps.id);\n            return {\n                data: {\n                    id: currentBoard ? currentBoard.id : null,\n                    title: currentBoard ? currentBoard.title : '',\n                    text: currentBoard ? currentBoard.text : '',\n                    phone: currentBoard ? currentBoard.phone : '',\n                    city: currentBoard ? currentBoard.city : '',\n                }\n            };\n        } else return null;\n    }\n\n    handlerChange = (field, value) => {\n        this.setState({\n            data: {\n                ...this.state.data,\n                [field]: value,\n            }\n        });\n    };\n\n    validateField = () => {\n        const validTitle = this.state.data.title.length > 0;\n        const validNumber =  this.state.data.phone.replace(/\\D/g, '').length === 11;\n\n        this.setState({\n            isValid: {\n                validTitle: validTitle,\n                validNumber: validNumber,\n            }\n        });\n\n        return {validTitle, validNumber};\n    };\n\n    handlerSubmit = () => {\n        const isValid = this.validateField();\n\n        if (isValid.validNumber && isValid.validTitle) {\n\n            if (this.state.data.id) {\n                this.props.changeItem(this.state.data.id, this.state.data);\n            } else {\n                this.props.saveItem(this.state.data.id, this.state.data);\n            }\n\n            this.setState({\n                data: {\n                    id: null,\n                    title: '',\n                    text: '',\n                    phone: '',\n                    city: '',\n                },\n                isValid: {\n                    validTitle: null,\n                    validNumber: null,\n                }\n            })\n        } else {\n            return null;\n        }\n    };\n\n    render() {\n        return (\n            <div className='current-board'>\n                <h1 className='current-board__title'>Подать объявление</h1>\n                <BoardField\n                    title={'Заголовок'}\n                    text={this.state.data.title}\n                    handler={this.handlerChange}\n                    validStatus={this.state.isValid.validTitle}\n                    type={fieldType.input}\n                    textHelper={['Обязательное поле', 'Не более 140 символов']}\n                />\n                <BoardField\n                    title={'Текст объявления'}\n                    text={this.state.data.text}\n                    handler={this.handlerChange}\n                    type={fieldType.textarea}\n                    textHelper={['Необязательное поле', 'Не более 300 символов']}\n                />\n                <BoardField\n                    title={'Телефон'}\n                    text={this.state.data.phone}\n                    handler={this.handlerChange}\n                    validStatus={this.state.isValid.validNumber}\n                    type={fieldType.phoneInput}\n                    textHelper={['Обязательное поле']}\n                />\n                <BoardField\n                    title={'Город'}\n                    text={this.state.data.city}\n                    handler={this.handlerChange}\n                    type={fieldType.select}\n                    textHelper={['Необязательное поле']}\n                />\n                <button className={'submit-button'} onClick={this.handlerSubmit}>Подать</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    board: state.boardList,\n    id: state.id\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n    {\n        saveItem,\n        changeItem\n    },\n    dispatch,\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n\nBoard.propTypes = {\n    board: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        phone: PropTypes.string.isRequired,\n        city: PropTypes.string,\n    })),\n    id: PropTypes.string,\n    saveItem: PropTypes.func,\n    changeItem: PropTypes.func,\n};","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.scss';\n\nclass BoardItem extends React.Component {\n    handleChange = (id) => {\n        this.props.chooseItem(id);\n    };\n\n    handleDelete = (id) => {\n        this.props.deleteItem(id);\n    };\n\n    render() {\n        const { title, text, phone, city, id } = this.props.board;\n\n        return (\n            <li className='board-item'>\n\n                <div className='board boar--left'>\n                    <div className='board__title'>{ title }</div>\n                    { text && <div className='board__text'>{ text }</div> }\n                    <div className='board__photo' />\n                </div>\n\n                <div className='board board--right'>\n                    <div className='board board--vertical'>\n                        <div className='board__phone'>{ phone }</div>\n                        {city && <div className='board__city'>{ city }</div>}\n                    </div>\n                    <div className='board board--vertical'>\n                        <button\n                            onClick={() => this.handleChange(id)}\n                            className='button button--blue'\n                        >\n                            Редактировать\n                        </button>\n                        <button\n                            onClick={() => this.handleDelete(id)}\n                            className='button button--red'\n                        >\n                            Удалить\n                        </button>\n                    </div>\n                </div>\n\n            </li>\n        );\n    }\n}\n\nexport default BoardItem;\n\nBoardItem.propTypes = {\n    board: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        phone: PropTypes.string.isRequired,\n        city: PropTypes.string,\n    }),\n    deleteItem: PropTypes.func,\n    chooseItem: PropTypes.func,\n};","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { deleteItem, chooseItem } from '../../AC';\nimport BoardItem from '../BoardItem';\nimport PropTypes from 'prop-types';\nimport './index.scss';\n\nclass BoardList extends React.Component {\n    render() {\n        return (\n            <div className='board-list'>\n                <h2 className='board-list__title'>Объявление</h2>\n                <ul>\n                    {\n                        this.props.boardList\n                            .sort((boardA, boardB) =>\n                                boardB.id - boardA.id\n                            )\n                            .map(board =>\n                            <BoardItem\n                                key={board.id}\n                                board={board}\n                                chooseItem={this.props.chooseItem}\n                                deleteItem={this.props.deleteItem}\n                            />\n                        )\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    boardList: state.boardList,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n    {\n        deleteItem,\n        chooseItem\n    },\n    dispatch,\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardList);\n\nBoardList.propTypes = {\n    board: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        text: PropTypes.string,\n        phone: PropTypes.string.isRequired,\n        city: PropTypes.string,\n    })),\n    deleteItem: PropTypes.func,\n    chooseItem: PropTypes.func,\n};","import * as React from 'react';\nimport Board from '../Board';\nimport BoardList from '../BoardList';\nimport './index.scss';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className='app'>\n                <div className='container'>\n                    <Board />\n                    <BoardList />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './component/App';\nimport './index.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}